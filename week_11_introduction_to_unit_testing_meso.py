# -*- coding: utf-8 -*-
"""week 11: Introduction to Unit Testing - Meso.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bFRA8yNVHv3l79bMH-zRmUmhdGYxfUn2

# **Background Information**
You are working on a project related to telecommunication billing data. As part of the project, a
data pipeline has been provided to you. The data pipeline is responsible for extracting data from
a CSV file, performing transformations using pandas, and storing the transformed data in
another CSV file. Your task is to write unit tests for the functions in the data pipeline using the
unittest framework.

# **Problem Statement**
Your goal is to develop robust unit tests for the three functions in the data pipeline:
data_extraction, data_transformation, and data_loading. These tests ensure the data
pipeline functions correctly and handle various scenarios and edge cases
"""

import unittest
import csv
import pandas as pd
from unittest.mock import patch

from google.colab import files
uploaded = files.upload()

def data_extraction(file_input):
    data = pd.read_csv('billing_data.csv')
    return data

ss = data_extraction('billing_data.csv')
print (ss)

len(ss)

def data_transformation(data):
    data = data.drop_duplicates()
    data['billing_amount'] = data['billing_amount'].str.replace('$', '').astype(float)
    data['total_charges'] = data['billing_amount'] + data['tax_amount']
    return data

def data_loading(data, output_file):
    data.to_csv(output_file, index=False)

# Your test data file path
data_file = 'billing_data.csv'
output_file = 'output_file.csv'

class TestDataPipeline(unittest.TestCase):

    def test_data_extraction(self):

        df = data_extraction(data_file)
        self.assertEqual(len(df), 5)
        self.assertIsInstance(df, pd.DataFrame)
        self.assertEqual(list(df.columns), ['customer_id', 'billing_amount', 'tax_amount'])


    def test_data_transformation(self):
        df = data_extraction(data_file)
        transformed_df = data_transformation(df)
        self.assertIsInstance(transformed_df, pd.DataFrame)
        self.assertListEqual(transformed_df.columns.tolist(),['customer_id', 'billing_amount', 'tax_amount', 'total_charges'])
        self.assertTrue(all(transformed_df['total_charges'].dtype == 'float'), )


    def test_data_loading(self):
        df = data_extraction(data_file)
        transformed_df = data_transformation(df)
        data_loading(transformed_df, output_file)
        self.assertTrue(os.path.exists(output_file))
        loaded_df = pd.read_csv(output_file)
        self.assertTrue(transformed_df.equals(loaded_df), )
        self.assertEqual(len(transformed_df), 3)

if __name__ == '__main__':
    unittest.main()